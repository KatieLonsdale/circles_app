require 'rails_helper'

RSpec.describe Notification, type: :model do
  describe 'relationships' do
    it { should belong_to(:user) }
    it { should belong_to(:notifiable) }
  end

  describe 'validations' do
    it { should validate_presence_of(:message) }
    it { should validate_presence_of(:action) }
  end

  describe 'scopes' do
    before(:each) do
      @user = create(:user)
      @circle = create(:circle)
      
      # Create notifications with specific timestamps to ensure order is predictable
      @old_notification = create(:notification, user: @user, circle_id: @circle.id, created_at: 4.days.ago)
      @read_notification = create(:notification, user: @user, circle_id: @circle.id, read: true, created_at: 3.days.ago)
      @unread_notification = create(:notification, user: @user, circle_id: @circle.id, read: false, created_at: 2.days.ago)
      @new_notification = create(:notification, user: @user, circle_id: @circle.id, created_at: 1.hour.ago)
    end

    it 'returns only unread notifications with unread scope' do
      expect(Notification.unread).to include(@unread_notification)
      expect(Notification.unread).to include(@new_notification)
      expect(Notification.unread).not_to include(@read_notification)
    end

    it 'returns only read notifications with read scope' do
      expect(Notification.read).to include(@read_notification)
      expect(Notification.read).not_to include(@unread_notification)
      expect(Notification.read).not_to include(@new_notification)
    end

    it 'returns notifications in order from newest to oldest with newest_first scope' do
      ordered_notifications = Notification.newest_first.to_a
      
      # Check the complete order
      expect(ordered_notifications).to eq([
        @new_notification,
        @unread_notification,
        @read_notification,
        @old_notification
      ])
    end
  end

  describe 'instance methods' do
    describe '#mark_as_read!' do
      it 'marks an unread notification as read' do
        notification = create(:notification, read: false)
        expect(notification.read).to eq(false)
        
        notification.mark_as_read!
        expect(notification.read).to eq(true)
      end
    end
    
    describe '#circle_name' do
      it 'returns the name of the associated circle when circle_id is present' do
        circle = create(:circle)
        notification = create(:notification, circle: circle)
        
        # Since the circle name is randomly generated by the factory,
        # we just need to verify it returns the correct circle's name
        expect(notification.circle_name).to eq(circle.name)
      end
      
      it 'returns nil when circle_id is nil' do
        notification = create(:notification, circle: nil)
        
        expect(notification.circle_name).to be_nil
      end
    end
  end
end
